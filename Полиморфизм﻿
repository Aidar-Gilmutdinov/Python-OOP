Задача1
class Selector:
    def __init__(self, numbers):
        self.numbers = numbers

    def get_odds(self):
        return [num for num in self.numbers if num % 2 != 0]

    def get_evens(self):
        return [num for num in self.numbers if num % 2 == 0]
# Ваш код

values = [11, 12, 13, 14, 15, 16, 22, 44, 66]
selector = Selector(values)
odds = selector.get_odds()
evens = selector.get_evens()
print(' '.join(map(str, odds)))
print(' '.join(map(str, evens)))
Задача2
class LeftParagraph:
    def __init__(self, field_width):
        self.field_width = field_width
        self.text = []

    def add_word(self, word):
        self.text.append(word)

    def end(self)
        print(' '.join(self.text))
        self.text.clear()  # Очищаем список слов для нового абзаца

class RightParagraph:
    def __init__(self, field_width):
        self.field_width = field_width
        self.text = []

    def add_word(self, word):
        self.text.append(word)

    def end(self):
        spaces = self.field_width - len(self.text[-1])
        print(' '.join(f'{word}{" "  *  (spaces - len(word))}' for word in reversed(self.text)))
        self.text.clear()  
        # Ваш код

lp = LeftParagraph(8)
lp.add_word('abc')
lp.add_word('defg')
lp.add_word('hi')
lp.add_word('jklmnopq')
lp.add_word('r')
lp.add_word('stuv')
lp.end()
print()

rp = RightParagraph(8)
rp.add_word('abc')
rp.add_word('defg')
rp.add_word('hi')
rp.add_word('jklmnopq')
rp.add_word('r')
rp.add_word('stuv')
rp.end()
Задача3
class DateError(Exception):
    pass


class AmericanDate:
    def __init__(self, year, month, day):
        self.year = year
        self.month = month
        self.day = day

    def set_year(self, year):
        self.year = year

    def set_month(self, month):
        self.month = month

    def set_day(self, day):
        self.day = day

    def get_year(self):
        return self.year

    def get_month(self):
        return self.month

    def get_day(self):
        return self.day

    def format(self):
        return f"{self.day:02}.{self.month:02}.{self.year}"


class EuropeanDate:
    def __init__(self, year, month, day):
        self.year = year
        self.month = month
        self.day = day

    def set_year(self, year):
        self.year = year

    def set_month(self, month):
        self.month = month

    def set_day(self, day):
        self.day = day

    def get_year(self):
        return self.year

    def get_month(self):
        return self.month

    def get_day(self):
        return self.day

    def format(self):
        return f"{self.day}.{self.month:02}.{self.year}"
# Ваш код

american = AmericanDate(2000, 4, 10)
european = EuropeanDate(2000, 4, 10)
print(american.format())
print(european.format())
Задача4
class MinStat:
    def __init__(self):
        self.min_value = float('inf')
        self.numbers = []

    def add_number(self, number):
        self.numbers.append(number)
        self.min_value = min(self.min_value, number)

    def result(self):
        if not self.numbers:
            return None
        return int(self.min_value)

class MaxStat:
    def __init__(self):
        self.max_value = -float('inf')
        self.numbers = []

    def add_number(self, number):
        self.numbers.append(number)
        self.max_value = max(self.max_value, number)

    def result(self):
        if not self.numbers:
            return None
        return int(self.max_value)

class AverageStat:
    def __init__(self):
        self.sum = 0
        self.count = 0
        self.numbers = []

    def add_number(self, number):
        self.numbers.append(number)
        self.sum += number
        self.count += 1

    def result(self):
        if not self.numbers:
            return None
        return float(self.sum / self.count)

# Ваш код

values = [1, 2, 4, 5]

mins = MinStat()
maxs = MaxStat()
average = AverageStat()
for v in values:
    mins.add_number(v)
    maxs.add_number(v)
    average.add_number(v)

print(mins.result(), maxs.result(), '{:<05.3}'.format(average.result()))

Задача5
class Table:
    def __init__(self, rows, cols):
        self.rows = rows
        self.cols = cols
        self.data = [[0]  *  cols for _ in range(rows)]

    def get_value(self, row, col):
        if 0 <= row < self.rows and 0 <= col < self.cols:
            return self.data[row][col]
        else:
            return None

    def set_value(self, row, col, value):
        if 0 <= row < self.rows and 0 <= col < self.cols:
            self.data[row][col] = value
        else:
            raise IndexError("Row or column out of bounds")

    def n_rows(self):
        return self.rows

    def n_cols(self):
        return self.cols
# Ваш код

tab = Table(3, 5)
tab.set_value(0, 1, 10)
tab.set_value(1, 2, 20)
tab.set_value(2, 3, 30)
for i in range(tab.n_rows()):
    for j in range(tab.n_cols()):
        print(tab.get_value(i, j), end=' ')
    print()
Задача6
class Rectangle:
    def __init__(self, x, y, w, h):
        self.x = x
        self.y = y
        self.w = w
        self.h = h

    def intersection(self, other):
        left = max(self.x, other.x)
        right = min(self.x + self.w, other.x + other.w)
        top = max(self.y, other.y)
        bottom = min(self.y + self.h, other.y + other.h)

        if left > right or top > bottom:
            return None

        x = max(self.x, other.x)
        y = max(self.y, other.y)
        w = min(self.x + self.w, other.x + other.w) - x
        h = min(self.y + self.h, other.y + other.h) - y

        return Rectangle(x, y, w, h)

    def get_x(self):
        return self.x

    def get_y(self):
        return self.y

    def get_w(self):
        return self.w

    def get_h(self):
        return self.h
# Ваш код

rect1 = Rectangle(0, 0, 10, 10)
rect2 = Rectangle(5, 5, 10, 10)
rect3 = rect1.intersection(rect2)

if rect3 is None:
    print('No intersection')
else:
    print(rect3.get_x(), rect3.get_y(), rect3.get_w(), rect3.get_h())
Задача7
class Table:
    def __init__(self, rows, cols):
        self.rows = rows
        self.cols = cols
        self.data = [[0]  *  cols for _ in range(rows)]

    def get_value(self, row, col):
        if 0 <= row < self.rows and 0 <= col < self.cols:
            return self.data[row][col]
        else:
            return None

    def set_value(self, row, col, value):
        if 0 <= row < self.rows and 0 <= col < self.cols:
            self.data[row][col] = value
        else:
            raise IndexError("Row or column out of bounds")

    def n_rows(self):
        return self.rows

    def n_cols(self):
        return self.cols

    def delete_row(self, row):
        if 0 <= row < self.rows:
            del self.data[row]
            self.rows -= 1
            for i in range(row, self.rows):
                self.data[i] = self.data[i + 1]

    def delete_col(self, col):
        if 0 <= col < self.cols:
            for row in range(self.rows):
                del self.data[row][col]
            self.cols -= 1
            for i in range(col, self.cols):
                for j in range(self.rows):
                    self.data[j][i] = self.data[j][i + 1]

    def add_row(self, row):
        if row <= self.rows:
            new_row = [0]  *  self.cols
            self.data.insert(row, new_row)
            for i in range(row, self.rows + 1):
                self.data[i] = self.data[i - 1]
            self.rows += 1

    def add_col(self, col):
        if col <= self.cols:
            for row in range(self.rows):
                self.data[row].insert(col, 0)
            for i in range(col, self.cols + 1):
                for j in range(self.rows):
                    self.data[j][i] = self.data[j][i - 1]
            self.cols += 1
# Ваш код

tab = Table(2, 2)

for i in range(tab.n_rows()):
    for j in range(tab.n_cols()):
        print(tab.get_value(i, j), end=' ')
    print()
print()

tab.set_value(0, 0, 10)
tab.set_value(0, 1, 20)
tab.set_value(1, 0, 30)
tab.set_value(1, 1, 40)

for i in range(tab.n_rows()):
    for j in range(tab.n_cols()):
        print(tab.get_value(i, j), end=' ')
    print()
print()

for i in range(-1, tab.n_rows() + 1):
    for j in range(-1, tab.n_cols() + 1):
        print(tab.get_value(i, j), end=' ')
    print()
print()

tab.add_row(0)
tab.add_col(1)

for i in range(-1, tab.n_rows() + 1):
    for j in range(-1, tab.n_cols() + 1):
        print(tab.get_value(i, j), end=' ')
    print()
print()

Задача8
class Person:
    def __init__(self, name, middle_name, surname, phones):
        self.name = name
        self.middle_name = middle_name
        self.surname = surname
        self.phones = phones

    def get_phone(self):
        return self.phones.get('private', None)

    def get_name(self):
        return f"{self.surname} {self.name} {self.middle_name}"

    def get_work_phone(self):
        return self.phones.get('work', None)

    def get_sms_text(self):
        return f"Уважаемый {self.name} {self.middle_name}! Примите участие в нашем беспроигрышном конкурсе для физических лиц."


class Company:
    def __init__(self, name, type, phones, workers):
        self.name = name
        self.type = type
        self.phones = phones
        self.workers = workers

    def get_phone(self):
        contact_phone = self.phones.get('contact', None)
        if contact_phone is not None:
            return contact_phone
        for worker in self.workers:
            work_phone = worker.get_work_phone()
            if work_phone is not None:
                return work_phone
        return None

    def get_name(self):
        return self.name

    def get_sms_text(self):
        return f"Для компании {self.name} есть супер предложение! Примите участие в нашем беспроигрышном конкурсе для {self.type}."


def send_sms(recipients):
    for recipient in recipients:
        phone = recipient.get_phone()
        if phone is not None:
            print(f"Отправлено СМС на номер {phone} с текстом: {recipient.get_sms_text()}")
        else:
            print(f"Не удалось отправить сообщение абоненту: {recipient.get_name()}")
# Ваш код

person1 = Person("Ivan", "Ivanovich", "Ivanov", {"private": 123, "work": 456})
person2 = Person("Ivan", "Petrovich", "Petrov", {"private": 789})
person3 = Person("Ivan", "Petrovich", "Sidorov", {"work": 789})
person4 = Person("John", "Unknown", "Doe", {})
company1 = Company("Bell", "ООО", {"contact": 111}, person3, person4)
company2 = Company("Cell", "АО", {"non_contact": 222}, person2, person3)
company3 = Company("Dell", "Ltd", {"non_contact": 333}, person2, person4)
send_sms(person1, person2, person3, person4, company1, company2, company3)
